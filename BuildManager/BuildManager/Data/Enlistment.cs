#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace BuildManager.Data
{

    public partial class EnlistmentDC : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertBuildType(BuildType instance);
        partial void UpdateBuildType(BuildType instance);
        partial void DeleteBuildType(BuildType instance);
        partial void InsertBuildXml(BuildXml instance);
        partial void UpdateBuildXml(BuildXml instance);
        partial void DeleteBuildXml(BuildXml instance);
        partial void InsertCommand(Command instance);
        partial void UpdateCommand(Command instance);
        partial void DeleteCommand(Command instance);
        partial void InsertConfiguration(Configuration instance);
        partial void UpdateConfiguration(Configuration instance);
        partial void DeleteConfiguration(Configuration instance);
        partial void InsertEmail(Email instance);
        partial void UpdateEmail(Email instance);
        partial void DeleteEmail(Email instance);
        partial void InsertEnlistment1(Enlistment1 instance);
        partial void UpdateEnlistment1(Enlistment1 instance);
        partial void DeleteEnlistment1(Enlistment1 instance);
        partial void InsertPhoneSKU(PhoneSKU instance);
        partial void UpdatePhoneSKU(PhoneSKU instance);
        partial void DeletePhoneSKU(PhoneSKU instance);
        partial void InsertResult(Result instance);
        partial void UpdateResult(Result instance);
        partial void DeleteResult(Result instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        #endregion

        public EnlistmentDC(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public EnlistmentDC(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public EnlistmentDC(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public EnlistmentDC(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<BuildType> BuildTypes
        {
            get
            {
                return this.GetTable<BuildType>();
            }
        }

        public System.Data.Linq.Table<BuildXml> BuildXmls
        {
            get
            {
                return this.GetTable<BuildXml>();
            }
        }

        public System.Data.Linq.Table<Command> Commands
        {
            get
            {
                return this.GetTable<Command>();
            }
        }

        public System.Data.Linq.Table<Configuration> Configurations
        {
            get
            {
                return this.GetTable<Configuration>();
            }
        }

        public System.Data.Linq.Table<Email> Emails
        {
            get
            {
                return this.GetTable<Email>();
            }
        }

        public System.Data.Linq.Table<Enlistment1> Enlistments
        {
            get
            {
                return this.GetTable<Enlistment1>();
            }
        }

        public System.Data.Linq.Table<PhoneSKU> PhoneSKUs
        {
            get
            {
                return this.GetTable<PhoneSKU>();
            }
        }

        public System.Data.Linq.Table<Result> Results
        {
            get
            {
                return this.GetTable<Result>();
            }
        }

        public System.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute()]
    public partial class BuildType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private short _ID;

        private string _Name;

        private EntitySet<Configuration> _Configurations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(short value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public BuildType()
        {
            this._Configurations = new EntitySet<Configuration>(new Action<Configuration>(this.attach_Configurations), new Action<Configuration>(this.detach_Configurations));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "SmallInt NOT NULL", IsPrimaryKey = true)]
        public short ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_BuildType_Configuration", Storage = "_Configurations", ThisKey = "ID", OtherKey = "DailyBuild", DeleteRule = "NO ACTION")]
        public EntitySet<Configuration> Configurations
        {
            get
            {
                return this._Configurations;
            }
            set
            {
                this._Configurations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.BuildType = this;
        }

        private void detach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.BuildType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute()]
    public partial class BuildXml : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private short _FileID;

        private string _FilePath;

        private EntitySet<Configuration> _Configurations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnFileIDChanging(short value);
        partial void OnFileIDChanged();
        partial void OnFilePathChanging(string value);
        partial void OnFilePathChanged();
        #endregion

        public BuildXml()
        {
            this._Configurations = new EntitySet<Configuration>(new Action<Configuration>(this.attach_Configurations), new Action<Configuration>(this.detach_Configurations));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FileID", DbType = "SmallInt NOT NULL", IsPrimaryKey = true)]
        public short FileID
        {
            get
            {
                return this._FileID;
            }
            set
            {
                if ((this._FileID != value))
                {
                    this.OnFileIDChanging(value);
                    this.SendPropertyChanging();
                    this._FileID = value;
                    this.SendPropertyChanged("FileID");
                    this.OnFileIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FilePath", DbType = "NVarChar(255)")]
        public string FilePath
        {
            get
            {
                return this._FilePath;
            }
            set
            {
                if ((this._FilePath != value))
                {
                    this.OnFilePathChanging(value);
                    this.SendPropertyChanging();
                    this._FilePath = value;
                    this.SendPropertyChanged("FilePath");
                    this.OnFilePathChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_BuildXml_Configuration", Storage = "_Configurations", ThisKey = "FileID", OtherKey = "BuildXmlID", DeleteRule = "NO ACTION")]
        public EntitySet<Configuration> Configurations
        {
            get
            {
                return this._Configurations;
            }
            set
            {
                this._Configurations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.BuildXml = this;
        }

        private void detach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.BuildXml = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "Commands")]
    public partial class Command : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private short _CommandID;

        private string _Command1;

        private string _CommandLine;

        private EntitySet<Configuration> _Configurations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCommandIDChanging(short value);
        partial void OnCommandIDChanged();
        partial void OnCommand1Changing(string value);
        partial void OnCommand1Changed();
        partial void OnCommandLineChanging(string value);
        partial void OnCommandLineChanged();
        #endregion

        public Command()
        {
            this._Configurations = new EntitySet<Configuration>(new Action<Configuration>(this.attach_Configurations), new Action<Configuration>(this.detach_Configurations));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CommandID", DbType = "SmallInt NOT NULL", IsPrimaryKey = true)]
        public short CommandID
        {
            get
            {
                return this._CommandID;
            }
            set
            {
                if ((this._CommandID != value))
                {
                    this.OnCommandIDChanging(value);
                    this.SendPropertyChanging();
                    this._CommandID = value;
                    this.SendPropertyChanged("CommandID");
                    this.OnCommandIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "Command", Storage = "_Command1", DbType = "NVarChar(100)")]
        public string Command1
        {
            get
            {
                return this._Command1;
            }
            set
            {
                if ((this._Command1 != value))
                {
                    this.OnCommand1Changing(value);
                    this.SendPropertyChanging();
                    this._Command1 = value;
                    this.SendPropertyChanged("Command1");
                    this.OnCommand1Changed();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CommandLine", DbType = "NVarChar(100)")]
        public string CommandLine
        {
            get
            {
                return this._CommandLine;
            }
            set
            {
                if ((this._CommandLine != value))
                {
                    this.OnCommandLineChanging(value);
                    this.SendPropertyChanging();
                    this._CommandLine = value;
                    this.SendPropertyChanged("CommandLine");
                    this.OnCommandLineChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_Command_Configuration", Storage = "_Configurations", ThisKey = "CommandID", OtherKey = "CommandID", DeleteRule = "NO ACTION")]
        public EntitySet<Configuration> Configurations
        {
            get
            {
                return this._Configurations;
            }
            set
            {
                this._Configurations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.Command = this;
        }

        private void detach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.Command = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "Configurations")]
    public partial class Configuration : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private short _ID;

        private System.Nullable<short> _UserID;

        private System.Nullable<short> _EmailID;

        private System.Nullable<short> _PhoneSkuID;

        private System.Nullable<short> _CommandID;

        private System.Nullable<short> _BuildXmlID;

        private System.Nullable<short> _EnlistmentID;

        private System.Nullable<short> _DailyBuild;

        private EntityRef<BuildType> _BuildType;

        private EntityRef<BuildXml> _BuildXml;

        private EntityRef<Command> _Command;

        private EntityRef<Email> _Email;

        private EntityRef<Enlistment1> _Enlistment1;

        private EntityRef<PhoneSKU> _PhoneSKU;

        private EntitySet<Result> _Results;

        private EntityRef<User> _User;

        // Added properties to make sorting work in DataGrid

        #region Sorting Properties


        public string UserFirstName { 
            get 
            {
                return User.FirstName;
            }

            set 
            {
                User.FirstName = value;
            }
        }

        public string UserLastName
        {
            get
            {
                return User.LastName;
            }

            set
            {
                User.LastName = value;
            }
        }

        public string PhoneSkuName
        {
            get
            {
                return PhoneSKU.Name;
            }

            set
            {
                PhoneSKU.Name = value;
            }
        }

        public string EnlistmentPath
        {
            get
            {
                return Enlistment1.Path;
            }

            set
            {
                Enlistment1.Path = value;
            }
        }

        public string CommandCommand1
        {
            get
            {
                return Command.Command1;
            }

            set
            {
                Command.Command1 = value;
            }
        }

        public string BuildTypeName
        {
            get
            {
                return BuildType.Name;
            }

            set
            {
                BuildType.Name = value;
            }
        }

        public string EmailEmailAccount
        {
            get
            {
                return Email.EmailAccount;
            }

            set
            {
                Email.EmailAccount = value;
            }
        }

        #endregion



        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(short value);
        partial void OnIDChanged();
        partial void OnUserIDChanging(System.Nullable<short> value);
        partial void OnUserIDChanged();
        partial void OnEmailIDChanging(System.Nullable<short> value);
        partial void OnEmailIDChanged();
        partial void OnPhoneSkuIDChanging(System.Nullable<short> value);
        partial void OnPhoneSkuIDChanged();
        partial void OnCommandIDChanging(System.Nullable<short> value);
        partial void OnCommandIDChanged();
        partial void OnBuildXmlIDChanging(System.Nullable<short> value);
        partial void OnBuildXmlIDChanged();
        partial void OnEnlistmentIDChanging(System.Nullable<short> value);
        partial void OnEnlistmentIDChanged();
        partial void OnDailyBuildChanging(System.Nullable<short> value);
        partial void OnDailyBuildChanged();
        #endregion

        public Configuration()
        {
            this._BuildType = default(EntityRef<BuildType>);
            this._BuildXml = default(EntityRef<BuildXml>);
            this._Command = default(EntityRef<Command>);
            this._Email = default(EntityRef<Email>);
            this._Enlistment1 = default(EntityRef<Enlistment1>);
            this._PhoneSKU = default(EntityRef<PhoneSKU>);
            this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "SmallInt NOT NULL", IsPrimaryKey = true)]
        public short ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "SmallInt")]
        public System.Nullable<short> UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EmailID", DbType = "SmallInt")]
        public System.Nullable<short> EmailID
        {
            get
            {
                return this._EmailID;
            }
            set
            {
                if ((this._EmailID != value))
                {
                    if (this._Email.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnEmailIDChanging(value);
                    this.SendPropertyChanging();
                    this._EmailID = value;
                    this.SendPropertyChanged("EmailID");
                    this.OnEmailIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PhoneSkuID", DbType = "SmallInt")]
        public System.Nullable<short> PhoneSkuID
        {
            get
            {
                return this._PhoneSkuID;
            }
            set
            {
                if ((this._PhoneSkuID != value))
                {
                    if (this._PhoneSKU.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPhoneSkuIDChanging(value);
                    this.SendPropertyChanging();
                    this._PhoneSkuID = value;
                    this.SendPropertyChanged("PhoneSkuID");
                    this.OnPhoneSkuIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CommandID", DbType = "SmallInt")]
        public System.Nullable<short> CommandID
        {
            get
            {
                return this._CommandID;
            }
            set
            {
                if ((this._CommandID != value))
                {
                    if (this._Command.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCommandIDChanging(value);
                    this.SendPropertyChanging();
                    this._CommandID = value;
                    this.SendPropertyChanged("CommandID");
                    this.OnCommandIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BuildXmlID", DbType = "SmallInt")]
        public System.Nullable<short> BuildXmlID
        {
            get
            {
                return this._BuildXmlID;
            }
            set
            {
                if ((this._BuildXmlID != value))
                {
                    if (this._BuildXml.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBuildXmlIDChanging(value);
                    this.SendPropertyChanging();
                    this._BuildXmlID = value;
                    this.SendPropertyChanged("BuildXmlID");
                    this.OnBuildXmlIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EnlistmentID", DbType = "SmallInt")]
        public System.Nullable<short> EnlistmentID
        {
            get
            {
                return this._EnlistmentID;
            }
            set
            {
                if ((this._EnlistmentID != value))
                {
                    if (this._Enlistment1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnEnlistmentIDChanging(value);
                    this.SendPropertyChanging();
                    this._EnlistmentID = value;
                    this.SendPropertyChanged("EnlistmentID");
                    this.OnEnlistmentIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DailyBuild", DbType = "SmallInt")]
        public System.Nullable<short> DailyBuild
        {
            get
            {
                return this._DailyBuild;
            }
            set
            {
                if ((this._DailyBuild != value))
                {
                    if (this._BuildType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDailyBuildChanging(value);
                    this.SendPropertyChanging();
                    this._DailyBuild = value;
                    this.SendPropertyChanged("DailyBuild");
                    this.OnDailyBuildChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_BuildType_Configuration", Storage = "_BuildType", ThisKey = "DailyBuild", OtherKey = "ID", IsForeignKey = true)]
        public BuildType BuildType
        {
            get
            {
                return this._BuildType.Entity;
            }
            set
            {
                BuildType previousValue = this._BuildType.Entity;
                if (((previousValue != value)
                            || (this._BuildType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BuildType.Entity = null;
                        previousValue.Configurations.Remove(this);
                    }
                    this._BuildType.Entity = value;
                    if ((value != null))
                    {
                        value.Configurations.Add(this);
                        this._DailyBuild = value.ID;
                    }
                    else
                    {
                        this._DailyBuild = default(Nullable<short>);
                    }
                    this.SendPropertyChanged("BuildType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_BuildXml_Configuration", Storage = "_BuildXml", ThisKey = "BuildXmlID", OtherKey = "FileID", IsForeignKey = true)]
        public BuildXml BuildXml
        {
            get
            {
                return this._BuildXml.Entity;
            }
            set
            {
                BuildXml previousValue = this._BuildXml.Entity;
                if (((previousValue != value)
                            || (this._BuildXml.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BuildXml.Entity = null;
                        previousValue.Configurations.Remove(this);
                    }
                    this._BuildXml.Entity = value;
                    if ((value != null))
                    {
                        value.Configurations.Add(this);
                        this._BuildXmlID = value.FileID;
                    }
                    else
                    {
                        this._BuildXmlID = default(Nullable<short>);
                    }
                    this.SendPropertyChanged("BuildXml");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_Command_Configuration", Storage = "_Command", ThisKey = "CommandID", OtherKey = "CommandID", IsForeignKey = true)]
        public Command Command
        {
            get
            {
                return this._Command.Entity;
            }
            set
            {
                Command previousValue = this._Command.Entity;
                if (((previousValue != value)
                            || (this._Command.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Command.Entity = null;
                        previousValue.Configurations.Remove(this);
                    }
                    this._Command.Entity = value;
                    if ((value != null))
                    {
                        value.Configurations.Add(this);
                        this._CommandID = value.CommandID;
                    }
                    else
                    {
                        this._CommandID = default(Nullable<short>);
                    }
                    this.SendPropertyChanged("Command");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_Email_Configuration", Storage = "_Email", ThisKey = "EmailID", OtherKey = "EmailID", IsForeignKey = true)]
        public Email Email
        {
            get
            {
                return this._Email.Entity;
            }
            set
            {
                Email previousValue = this._Email.Entity;
                if (((previousValue != value)
                            || (this._Email.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Email.Entity = null;
                        previousValue.Configurations.Remove(this);
                    }
                    this._Email.Entity = value;
                    if ((value != null))
                    {
                        value.Configurations.Add(this);
                        this._EmailID = value.EmailID;
                    }
                    else
                    {
                        this._EmailID = default(Nullable<short>);
                    }
                    this.SendPropertyChanged("Email");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_Enlistment_Configuration", Storage = "_Enlistment1", ThisKey = "EnlistmentID", OtherKey = "Id", IsForeignKey = true)]
        public Enlistment1 Enlistment1
        {
            get
            {
                return this._Enlistment1.Entity;
            }
            set
            {
                Enlistment1 previousValue = this._Enlistment1.Entity;
                if (((previousValue != value)
                            || (this._Enlistment1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Enlistment1.Entity = null;
                        previousValue.Configurations.Remove(this);
                    }
                    this._Enlistment1.Entity = value;
                    if ((value != null))
                    {
                        value.Configurations.Add(this);
                        this._EnlistmentID = value.Id;
                    }
                    else
                    {
                        this._EnlistmentID = default(Nullable<short>);
                    }
                    this.SendPropertyChanged("Enlistment1");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_PhoneSku_Configuration", Storage = "_PhoneSKU", ThisKey = "PhoneSkuID", OtherKey = "ID", IsForeignKey = true)]
        public PhoneSKU PhoneSKU
        {
            get
            {
                return this._PhoneSKU.Entity;
            }
            set
            {
                PhoneSKU previousValue = this._PhoneSKU.Entity;
                if (((previousValue != value)
                            || (this._PhoneSKU.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PhoneSKU.Entity = null;
                        previousValue.Configurations.Remove(this);
                    }
                    this._PhoneSKU.Entity = value;
                    if ((value != null))
                    {
                        value.Configurations.Add(this);
                        this._PhoneSkuID = value.ID;
                    }
                    else
                    {
                        this._PhoneSkuID = default(Nullable<short>);
                    }
                    this.SendPropertyChanged("PhoneSKU");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_Results_Configuration", Storage = "_Results", ThisKey = "ID", OtherKey = "ConfigID", DeleteRule = "NO ACTION")]
        public EntitySet<Result> Results
        {
            get
            {
                return this._Results;
            }
            set
            {
                this._Results.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_User_Configuration", Storage = "_User", ThisKey = "UserID", OtherKey = "UserID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Configurations.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Configurations.Add(this);
                        this._UserID = value.UserID;
                    }
                    else
                    {
                        this._UserID = default(Nullable<short>);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Results(Result entity)
        {
            this.SendPropertyChanging();
            entity.Configuration = this;
        }

        private void detach_Results(Result entity)
        {
            this.SendPropertyChanging();
            entity.Configuration = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute()]
    public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Nullable<short> _UserID;

        private string _EmailAccount;

        private System.Nullable<bool> _Primary;

        private short _EmailID;

        private EntitySet<Configuration> _Configurations;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUserIDChanging(System.Nullable<short> value);
        partial void OnUserIDChanged();
        partial void OnEmailAccountChanging(string value);
        partial void OnEmailAccountChanged();
        partial void OnPrimaryChanging(System.Nullable<bool> value);
        partial void OnPrimaryChanged();
        partial void OnEmailIDChanging(short value);
        partial void OnEmailIDChanged();
        #endregion

        public Email()
        {
            this._Configurations = new EntitySet<Configuration>(new Action<Configuration>(this.attach_Configurations), new Action<Configuration>(this.detach_Configurations));
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "SmallInt")]
        public System.Nullable<short> UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EmailAccount", DbType = "NVarChar(100)")]
        public string EmailAccount
        {
            get
            {
                return this._EmailAccount;
            }
            set
            {
                if ((this._EmailAccount != value))
                {
                    this.OnEmailAccountChanging(value);
                    this.SendPropertyChanging();
                    this._EmailAccount = value;
                    this.SendPropertyChanged("EmailAccount");
                    this.OnEmailAccountChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Primary", DbType = "Bit")]
        public System.Nullable<bool> Primary
        {
            get
            {
                return this._Primary;
            }
            set
            {
                if ((this._Primary != value))
                {
                    this.OnPrimaryChanging(value);
                    this.SendPropertyChanging();
                    this._Primary = value;
                    this.SendPropertyChanged("Primary");
                    this.OnPrimaryChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EmailID", DbType = "SmallInt NOT NULL", IsPrimaryKey = true)]
        public short EmailID
        {
            get
            {
                return this._EmailID;
            }
            set
            {
                if ((this._EmailID != value))
                {
                    this.OnEmailIDChanging(value);
                    this.SendPropertyChanging();
                    this._EmailID = value;
                    this.SendPropertyChanged("EmailID");
                    this.OnEmailIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_Email_Configuration", Storage = "_Configurations", ThisKey = "EmailID", OtherKey = "EmailID", DeleteRule = "NO ACTION")]
        public EntitySet<Configuration> Configurations
        {
            get
            {
                return this._Configurations;
            }
            set
            {
                this._Configurations.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_User_Email", Storage = "_User", ThisKey = "UserID", OtherKey = "UserID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Emails.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Emails.Add(this);
                        this._UserID = value.UserID;
                    }
                    else
                    {
                        this._UserID = default(Nullable<short>);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.Email = this;
        }

        private void detach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.Email = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "Enlistments")]
    public partial class Enlistment1 : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private short _Id;

        private string _Path;

        private EntitySet<Configuration> _Configurations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(short value);
        partial void OnIdChanged();
        partial void OnPathChanging(string value);
        partial void OnPathChanged();
        #endregion

        public Enlistment1()
        {
            this._Configurations = new EntitySet<Configuration>(new Action<Configuration>(this.attach_Configurations), new Action<Configuration>(this.detach_Configurations));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", DbType = "SmallInt NOT NULL", IsPrimaryKey = true)]
        public short Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Path", DbType = "NVarChar(255)")]
        public string Path
        {
            get
            {
                return this._Path;
            }
            set
            {
                if ((this._Path != value))
                {
                    this.OnPathChanging(value);
                    this.SendPropertyChanging();
                    this._Path = value;
                    this.SendPropertyChanged("Path");
                    this.OnPathChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_Enlistment_Configuration", Storage = "_Configurations", ThisKey = "Id", OtherKey = "EnlistmentID", DeleteRule = "NO ACTION")]
        public EntitySet<Configuration> Configurations
        {
            get
            {
                return this._Configurations;
            }
            set
            {
                this._Configurations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.Enlistment1 = this;
        }

        private void detach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.Enlistment1 = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute()]
    public partial class PhoneSKU : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private short _ID;

        private string _Name;

        private EntitySet<Configuration> _Configurations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(short value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public PhoneSKU()
        {
            this._Configurations = new EntitySet<Configuration>(new Action<Configuration>(this.attach_Configurations), new Action<Configuration>(this.detach_Configurations));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "SmallInt NOT NULL", IsPrimaryKey = true)]
        public short ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_PhoneSku_Configuration", Storage = "_Configurations", ThisKey = "ID", OtherKey = "PhoneSkuID", DeleteRule = "NO ACTION")]
        public EntitySet<Configuration> Configurations
        {
            get
            {
                return this._Configurations;
            }
            set
            {
                this._Configurations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.PhoneSKU = this;
        }

        private void detach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.PhoneSKU = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "Results")]
    public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private System.Nullable<short> _ConfigID;

        private System.Nullable<System.DateTime> _StartTime;

        private System.Nullable<System.DateTime> _StopTime;

        private System.Nullable<bool> _Pass;

        private string _Summary;

        private EntityRef<Configuration> _Configuration;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnConfigIDChanging(System.Nullable<short> value);
        partial void OnConfigIDChanged();
        partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnStartTimeChanged();
        partial void OnStopTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnStopTimeChanged();
        partial void OnPassChanging(System.Nullable<bool> value);
        partial void OnPassChanged();
        partial void OnSummaryChanging(string value);
        partial void OnSummaryChanged();
        #endregion

        public Result()
        {
            this._Configuration = default(EntityRef<Configuration>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ConfigID", DbType = "SmallInt")]
        public System.Nullable<short> ConfigID
        {
            get
            {
                return this._ConfigID;
            }
            set
            {
                if ((this._ConfigID != value))
                {
                    if (this._Configuration.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnConfigIDChanging(value);
                    this.SendPropertyChanging();
                    this._ConfigID = value;
                    this.SendPropertyChanged("ConfigID");
                    this.OnConfigIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartTime", DbType = "DateTime")]
        public System.Nullable<System.DateTime> StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if ((this._StartTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StopTime", DbType = "DateTime")]
        public System.Nullable<System.DateTime> StopTime
        {
            get
            {
                return this._StopTime;
            }
            set
            {
                if ((this._StopTime != value))
                {
                    this.OnStopTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StopTime = value;
                    this.SendPropertyChanged("StopTime");
                    this.OnStopTimeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Pass", DbType = "Bit")]
        public System.Nullable<bool> Pass
        {
            get
            {
                return this._Pass;
            }
            set
            {
                if ((this._Pass != value))
                {
                    this.OnPassChanging(value);
                    this.SendPropertyChanging();
                    this._Pass = value;
                    this.SendPropertyChanged("Pass");
                    this.OnPassChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Summary", DbType = "NVarChar(4000)")]
        public string Summary
        {
            get
            {
                return this._Summary;
            }
            set
            {
                if ((this._Summary != value))
                {
                    this.OnSummaryChanging(value);
                    this.SendPropertyChanging();
                    this._Summary = value;
                    this.SendPropertyChanged("Summary");
                    this.OnSummaryChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_Results_Configuration", Storage = "_Configuration", ThisKey = "ConfigID", OtherKey = "ID", IsForeignKey = true)]
        public Configuration Configuration
        {
            get
            {
                return this._Configuration.Entity;
            }
            set
            {
                Configuration previousValue = this._Configuration.Entity;
                if (((previousValue != value)
                            || (this._Configuration.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Configuration.Entity = null;
                        previousValue.Results.Remove(this);
                    }
                    this._Configuration.Entity = value;
                    if ((value != null))
                    {
                        value.Results.Add(this);
                        this._ConfigID = value.ID;
                    }
                    else
                    {
                        this._ConfigID = default(Nullable<short>);
                    }
                    this.SendPropertyChanged("Configuration");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private short _UserID;

        private string _FirstName;

        private string _LastName;

        private EntitySet<Configuration> _Configurations;

        private EntitySet<Email> _Emails;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUserIDChanging(short value);
        partial void OnUserIDChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        #endregion

        public User()
        {
            this._Configurations = new EntitySet<Configuration>(new Action<Configuration>(this.attach_Configurations), new Action<Configuration>(this.detach_Configurations));
            this._Emails = new EntitySet<Email>(new Action<Email>(this.attach_Emails), new Action<Email>(this.detach_Emails));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "SmallInt NOT NULL", IsPrimaryKey = true)]
        public short UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FirstName", DbType = "NVarChar(100)")]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if ((this._FirstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LastName", DbType = "NVarChar(100)")]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if ((this._LastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_User_Configuration", Storage = "_Configurations", ThisKey = "UserID", OtherKey = "UserID", DeleteRule = "NO ACTION")]
        public EntitySet<Configuration> Configurations
        {
            get
            {
                return this._Configurations;
            }
            set
            {
                this._Configurations.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_User_Email", Storage = "_Emails", ThisKey = "UserID", OtherKey = "UserID", DeleteRule = "NO ACTION")]
        public EntitySet<Email> Emails
        {
            get
            {
                return this._Emails;
            }
            set
            {
                this._Emails.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Configurations(Configuration entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Emails(Email entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Emails(Email entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }
    }
}
#pragma warning restore 1591
